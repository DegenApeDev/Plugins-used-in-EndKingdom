<?php echo "PocketMine-MP plugin FineChests v0.1\nThis file has been generated using DevTools v1.10.0 at Sat, 30 May 2015 17:34:12 +0200\n----------------\n";if(extension_loaded("phar")){$phar = new \Phar(__FILE__);foreach($phar->getMetadata() as $key => $value){echo ucfirst($key).": ".(is_array($value) ? implode(", ", $value):$value)."\n";}} __HALT_COMPILER(); ?>
’ÿa:9:{s:4:"name";s:10:"FineChests";s:7:"version";s:3:"0.1";s:4:"main";s:18:"Asidert\FineChests";s:3:"api";a:1:{i:0;s:5:"1.0.0";}s:6:"depend";a:0:{}s:11:"description";N;s:7:"authors";a:1:{i:0;s:7:"Asidert";}s:7:"website";N;s:12:"creationDate";i:1433000052;}	README.mdãtØiUã‡µ*¶src/Asidert/FineChests.phptØiUVJn¯¶
plugin.yml…tØiU…ÖqÑÛ¶=======================================================
THIS PLUGIN MADE BY ASIDERT (ZYRANOV BORIS) FROM RUSSIA
DO NOT COPY CODE!
MY VK: http://www.vk.com/ZyranovBoris
=======================================================<?php
namespace Asidert;

use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerInteractEvent;
use pocketmine\level\Level;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;
use pocketmine\event\block\BlockBreakEvent;
use pocketmine\math\Vector3;
use pocketmine\tile\Chest;
use pocketmine\item\Item;

class FineChests extends PluginBase implements CommandExecutor, Listener
{
	private static $obj = null;
	public function onEnable()
	{
		if(!self::$obj instanceof Main)
		{
			self::$obj = $this;
		}
        @mkdir($this->getDataFolder());
        $this->iconfig=new Config($this->getDataFolder()."items.yml", Config::YAML, array());
        if(!$this->iconfig->exists("items"))
        {
        	$this->iconfig->set("items",array(320,0,285,0));
        	$this->iconfig->save();
        }
        $this->items=$this->iconfig->get("items");
        
        $this->config=new Config($this->getDataFolder()."chest.yml", Config::YAML, array());
        if(!$this->config->exists("chest"))
        {
        	$this->config->set("chest",array());
        	$this->config->save();
        }
        $this->chest=$this->config->get("chest");
        $this->set=array();
        $this->getServer()->getPluginManager()->registerEvents($this, $this);
    }
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args)
    {
    	if(!isset($args[0])){unset($sender,$cmd,$label,$args);return false;};
    	switch($args[0])
    	{
    	case "reload":
    		unset($this->iconfig,$this->config);
    		@mkdir($this->getDataFolder());
        	$this->iconfig=new Config($this->getDataFolder()."items.yml", Config::YAML, array());
        	if(!$this->iconfig->exists("items"))
        	{
        		$this->iconfig->set("items",array(320,0,285,0));
        		$this->iconfig->save();
        	}
        	$this->items=$this->iconfig->get("items");
        	
        	$this->config=new Config($this->getDataFolder()."chest.yml", Config::YAML, array());
        	if(!$this->config->exists("chest"))
        	{
        		$this->config->set("chest",array());
        		$this->config->save();
        	}
        	$this->chest=$this->config->get("chest");
        	$this->set=array();
    		$sender->sendMessage("[FineChests] Ð£ÑÐ¿ÐµÑˆÐ½Ð¾ Ð¿ÐµÑ€ÐµÐ·Ð°Ð³Ñ€ÑƒÐ¶ÐµÐ½Ð¾");
    		break;
    	case "reset":
    		$this->ResetChest();
    		$sender->sendMessage("[FineChests] Ð’ÐµÑ‰Ð¸ Ð¿ÐµÑ€ÐµÐ·Ð°Ð³Ñ€ÑƒÐ¶ÐµÐ½Ñ‹");
    		break;
    	case "clear":
    		$this->ClearChest();
    		$sender->sendMessage("[FineChests] Ð¡ÑƒÐ½Ð´ÑƒÐºÐ¸ Ð¾Ñ‡Ð¸Ñ‰ÐµÐ½Ñ‹");
    		break;
    	case "add":
    	case "remove":
    		if(!$sender instanceof Player){$sender->sendMessage("[FineChests] ÐÐµÐ»ÑŒÐ·Ñ Ð²Ñ‹Ð±Ð¸Ñ€Ð°Ñ‚ÑŒ ÑÑƒÐ½Ð´ÑƒÐºÐ¸ Ñ ÐºÐ¾Ð½ÑÐ¾Ð»Ð¸ !");break;};
    		$this->set[$sender->getName()] = $args[0];
            $sender->sendMessage("[FineChests] Ð¢Ñ‹ÐºÐ½Ð¸ ÑÑƒÐ½Ð´ÑƒÐº");
    		break;
    	default:
    		unset($sender,$cmd,$label,$args);
			return false;
			break;
    	}
        unset($sender,$cmd,$label,$args);
        return true;
    }
    
    public static function getInstance()
	{
		return self::$obj;
	}
    
    public function onInteract(PlayerInteractEvent $event)
    {
    	$block=$event->getBlock();
        if(isset($this->set[$event->getPlayer()->getName()]))
        {
        	if($block->getId()!=54)
        	{
        		$event->getPlayer()->sendMessage("[FineChests] Ð¢Ñ‹ÐºÐ½Ð¸ ÑÑƒÐ½Ð´ÑƒÐº");
            	unset($event,$block,$key,$val);
            	return;
        	}
        	$a=$this->set[$event->getPlayer()->getName()];
        	unset($this->set[$event->getPlayer()->getName()]);
            switch($a)
            {
            case "add":
            	foreach($this->chest as $key=>$val)
            	{
            		if($val["x"]==$block->getX() && $val["y"]==$block->getY() && $val["z"]==$block->getZ() && $val["level"]==$block->getLevel()->getFolderName())
            		{
            			$event->getPlayer()->sendMessage("[FineChests] Ð­Ñ‚Ð¾Ñ‚ ÑÑƒÐ½Ð´ÑƒÐº ÑƒÐ¶Ðµ Ð² ÑÐ¿Ð¸ÑÐºÐµ");
            			unset($event,$block,$key,$val);
            			return;
            		}
            	}
            	$tmp=array();
            	$tmp["x"]=$block->getX();
            	$tmp["y"]=$block->getY();
            	$tmp["z"]=$block->getZ();
            	$tmp["level"]=$block->getLevel()->getFolderName();
                $this->chest[]=$tmp;
                unset($tmp,$key,$val);
                $event->getPlayer()->sendMessage("[FineChests] Ð¡ÑƒÐ½Ð´ÑƒÐº Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½ Ð² ÑÐ¿Ð¸ÑÐ¾Ðº !");
                break;
            case "remove":
            	$msg="[FineChests] Ð­Ñ‚Ð¾Ñ‚ ÑÑƒÐ½Ð´ÑƒÐº Ð½Ðµ Ð² ÑÐ¿Ð¸ÑÐºÐµ !";
                foreach($this->chest as $key=>$val)
            	{
            		if($val["x"]==$block->getX() && $val["y"]==$block->getY() && $val["z"]==$block->getZ() && $val["level"]==$block->getLevel()->getFolderName())
            		{
            			array_splice($this->chest,$key,1);
            			$msg="[FineChests] Ð¡ÑƒÐ½Ð´ÑƒÐº ÑƒÐ´Ð°Ð»ÐµÐ½ Ð¸Ð· ÑÐ¿Ð¸ÑÐºÐ° !";
            			break;
            		}
            	}
            	$event->getPlayer()->sendMessage($msg);
            	unset($key,$val);
                break;
            }
            
        }
        $this->saveChest();
        unset($block,$event,$a);
    }
    public function onBreakEvent(BlockBreakEvent $event)
    {
    	$block=$event->getBlock();
    	foreach($this->chest as $key=>$val)
        {
        	if($val["x"]==$block->getX() && $val["y"]==$block->getY() && $val["z"]==$block->getZ() && $val["level"]==$block->getLevel()->getFolderName())
        	{
        		if(!$event->getPlayer()->isOp())
        		{
        			$event->getPlayer()->sendMessage("[FineChests]Ð¢Ñ‹ Ð½Ðµ Ð°Ð´Ð¼Ð¸Ð½ !");
        			$event->setCancelled();
        			break;
        		}
            	array_splice($this->chest,$key,1);
            	$event->getPlayer()->sendMessage("[FineChests] Ð¡ÑƒÐ½Ð´ÑƒÐº ÑƒÐ´Ð°Ð»ÐµÐ½ Ð¸Ð· ÑÐ¿Ð¸ÑÐºÐ° !");
            	break;
            }
        }
        unset($event,$block,$key,$val);
	}
	
    public function onDisable()
    {
    //$this->saveChest();
    }
    
    public function ClearChest()
    {
    	foreach($this->chest as $val)
    	{
    		if(!isset($val["level"])){continue;};
    		$level=$this->getServer()->getLevelByName($val["level"]);
    		if(!$level instanceof Level){continue;};
    		$v3=new Vector3($val["x"],$val["y"],$val["z"]);
    		if($level->getBlock($v3)->getId()!=54){continue;};
    		$chest=$level->getTile($v3);
    		for($i=0;$i<$chest->getSize();$i++)
    		{
    			$chest->getInventory()->setItem($i,Item::get(0,0));
    		}
    	}
    	unset($val,$level,$v3,$chest,$i,$rand,$rid,$item);
    }
    
    public function ResetChest()
    {
    	foreach($this->chest as $val)
    	{
    		if(!isset($val["level"])){continue;};
    		$level=$this->getServer()->getLevelByName($val["level"]);
    		if(!$level instanceof Level){continue;};
    		$v3=new Vector3($val["x"],$val["y"],$val["z"]);
    		if($level->getBlock($v3)->getId()!=54){continue;};
    		$chest=$level->getTile($v3);
    		for($i=0;$i<$chest->getSize();$i++)
    		{
    			$chest->getInventory()->setItem($i,Item::get(0,0));
    		}
    		$rand=mt_rand(1,10);
    		for($i=0;$i<$rand;$i++)
    		{
    			$rid=mt_rand(0,count($this->items)/2);
    			$item=Item::get((int)$this->items[$rid],(int)$this->items[$rid+1]);
    			$rid=mt_rand(0,$chest->getSize()-1);
    			while($chest->getInventory()->getItem($rid)->getId()!=0)
    			{
    				$rid=mt_rand(0,$chest->getSize()-1);
    			}
    			$chest->getInventory()->setItem($rid,$item);
    		}
    	}
    	unset($val,$level,$v3,$chest,$i,$rand,$rid,$item);
    }
    public function saveChest()
    {
    	$this->config->set("chest",$this->chest);
    	$this->config->save();
    }
}
name: FineChests
main: Asidert\FineChests
version: "0.1"
author: Asidert
api: [1.0.0]
load: POSTWORLD
commands:
 cr:
  permission: FChestReset.command
  description: Ð ÐµÑÐµÑ‚ ÑÑƒÐ½Ð´ÑƒÐºÐ¾Ð²
  usage: /cr <add|remove|reload|reset>
permissions:
 FChestReset.*:
  default: op
  description: ÐŸÐµÑ€Ð¼
  children:
   FChestReset.command.*:
    default: op
    description: Ð®Ð· ÐºÐ¾Ð¼Ð°Ð½Ð´
NÍ
µYÄn¸E–“@»ú&(ÉGBMB
